basePath: /
definitions:
  golangproject_pkg_reqresp.AuthRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  golangproject_pkg_reqresp.AuthResponse:
    properties:
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
    type: object
  golangproject_pkg_reqresp.ErrorResponse:
    properties:
      message:
        example: error message
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server for Clean Architecture.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Clean Architecture API
  version: "1.0"
paths:
  /login:
    post:
      consumes:
      - application/json
      description: Authenticate user and get JWT token
      parameters:
      - description: Login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/golangproject_pkg_reqresp.AuthRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/golangproject_pkg_reqresp.AuthResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/golangproject_pkg_reqresp.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/golangproject_pkg_reqresp.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/golangproject_pkg_reqresp.ErrorResponse'
      summary: User login
      tags:
      - auth
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
